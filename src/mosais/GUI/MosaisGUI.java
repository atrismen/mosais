/*
    Mosais - Mosaic maker.
    Copyright (C) 2015  Andrew Trismen

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
	Contact: Andrew Trismen - atrismen@gmail.com
 */
package mosais.GUI;

import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.imgscalr.Scalr;

import mosais.controller.Mosais;

/**
 * The graphical interface to the mosais program
 * 
 * TODO: A cool effect can be created by reusing the same full image object from 1 run to the next, specifically
 * when going from a low density mosaic to a high density mosaic.
 * 
 * @author andrew
 */
public class MosaisGUI extends javax.swing.JFrame {
    
	private static final long serialVersionUID = 1L;

	/** largest height or width image can have */
    public static final int MAX_DIMENSION = 600;
    
    /** The size of plot to use when points only is selected */
    public static final int POINTS_DIM = 600;
    
    /** The default width of the draw container */
    public static final int DEFAULT_WIDTH = 400;
    
    /** The default height of the draw container */
    public static final int DEFAULT_HEIGHT = 450;
    
    /** Instance of the default state */
    private final DefaultState defaultState = new DefaultState();
    
    /** Instance of the picture selected state */
    private final PictureSelectedState picSelectedState = new PictureSelectedState();
    
    /** Instance of the points only state */
    private final PointsOnlyState pointsOnlyState = new PointsOnlyState();
    
    /** The current state of the gui, starts in default state. */
    private GuiState currentState = defaultState;
    
    /** The location of the picture file to be modified */
    private File inputFile;
    
    /** The full size image */
    private BufferedImage fullImage;
    
    /** Store the full image for saving */
    private BufferedImage saveImage;
    
    /** Scaled down version of original image */
    private BufferedImage scaledImage;
    
    /** Panel to draw images into */
    private DrawPanel drawPanel;
    
    /** Reference to the controller class */
    private Mosais controller;
    
    /** Reference to this, for state objects to access */
    private MosaisGUI gui = this;

    /**
     * Creates new gui
     */
    public MosaisGUI(Mosais controller) {
        this.controller = controller;
        initComponents();
        currentState.enterState();
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plotType = new javax.swing.ButtonGroup();
        headingPanel = new javax.swing.JPanel();
        heading = new javax.swing.JLabel();
        subText = new javax.swing.JLabel();
        drawContainer = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();
        densitySlider = new javax.swing.JSlider();
        densityLabel = new javax.swing.JLabel();
        plotTypePanel = new javax.swing.JPanel();
        randomPlot = new javax.swing.JRadioButton();
        poissonPlot = new javax.swing.JRadioButton();
        picSelectBtn = new javax.swing.JButton();
        startBtn = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        pointsOnlyBtn = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpItem = new javax.swing.JMenuItem();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mosais");
        setBackground(new java.awt.Color(78, 96, 122));

        heading.setFont(new java.awt.Font("Courier 10 Pitch", 1, 48)); // NOI18N
        heading.setText("Mosais");

        subText.setFont(new java.awt.Font("Courier 10 Pitch", 1, 18)); // NOI18N
        subText.setText("Mosaic Maker");

        javax.swing.GroupLayout headingPanelLayout = new javax.swing.GroupLayout(headingPanel);
        headingPanel.setLayout(headingPanelLayout);
        headingPanelLayout.setHorizontalGroup(
            headingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headingPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(headingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headingPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(subText))
                    .addComponent(heading))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headingPanelLayout.setVerticalGroup(
            headingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subText)
                .addContainerGap())
        );

        drawContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        drawContainer.setMaximumSize(new java.awt.Dimension(1200, 1200));
        drawContainer.setMinimumSize(new java.awt.Dimension(400, 450));
        drawContainer.setPreferredSize(new java.awt.Dimension(400, 450));

        densitySlider.setFont(new java.awt.Font("Ubuntu", 0, 1)); // NOI18N
        densitySlider.setMajorTickSpacing(1);
        densitySlider.setMaximum(5);
        densitySlider.setMinimum(1);
        densitySlider.setOrientation(javax.swing.JSlider.VERTICAL);
        densitySlider.setPaintTicks(true);
        densitySlider.setPaintTrack(false);
        densitySlider.setSnapToTicks(true);
        densitySlider.setValue(5);
        densitySlider.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        densityLabel.setText("Density");

        plotTypePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        plotType.add(randomPlot);
        randomPlot.setText("Random");

        plotType.add(poissonPlot);
        poissonPlot.setSelected(true);
        poissonPlot.setText("Uniform");

        javax.swing.GroupLayout plotTypePanelLayout = new javax.swing.GroupLayout(plotTypePanel);
        plotTypePanel.setLayout(plotTypePanelLayout);
        plotTypePanelLayout.setHorizontalGroup(
            plotTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotTypePanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(plotTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(poissonPlot)
                    .addComponent(randomPlot))
                .addGap(29, 29, 29))
        );
        plotTypePanelLayout.setVerticalGroup(
            plotTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(randomPlot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(poissonPlot)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        picSelectBtn.setText("Picture...");
        picSelectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picSelectBtnActionPerformed(evt);
            }
        });

        startBtn.setText("Start");
        startBtn.setEnabled(false);
        startBtn.setPreferredSize(new java.awt.Dimension(74, 30));
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.setMaximumSize(new java.awt.Dimension(75, 50));
        saveButton.setMinimumSize(new java.awt.Dimension(75, 50));
        saveButton.setPreferredSize(new java.awt.Dimension(75, 50));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		saveImage(evt);
        	}
        });

        pointsOnlyBtn.setText("Points Only");
        pointsOnlyBtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                currentState.handlePointsOnlyToggle();
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(picSelectBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(densityLabel)
                            .addComponent(densitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(plotTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pointsOnlyBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addComponent(densityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(densitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plotTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pointsOnlyBtn)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(picSelectBtn)
                        .addGap(18, 18, 18)
                        .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        openItem.setText("Open...");
        openItem.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		picSelectBtnActionPerformed(evt);
        	}
        });
        fileMenu.add(openItem);
        
        saveItem.setText("Save...");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		saveImage(evt);
        	}
        });
        fileMenu.add(saveItem);

        exitItem.setText("Exit...");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		System.exit(0);
        	}
        });
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");
        helpItem.setText("Help...");
        helpItem.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		new HelpDialog(null, true);
        	}
        });
        helpMenu.add(helpItem);

        aboutItem.setText("About...");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		new AboutDialog(null, true);
        	}
        });
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(drawContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(drawContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Open a file chooser when the picture select button is clicked.
     * If the user selects a valid file, load the full size image and 
     * display a scaled image in the GUI. The start button will enable,
     * allowing the mosaic to be generated.
     * 
     * @param evt Button dispatching this event.
     */
    private void picSelectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picSelectBtnActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnValue = chooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) { 
        	inputFile = chooser.getSelectedFile();
        	currentState.handlePicSelected();
        }
    }//GEN-LAST:event_picSelectBtnActionPerformed
    
    /**
     * Save the most recently generated mosaic to a file.
     * Opens a file chooser to allow the user to enter the file name for 
     * the output file. 
     * Allowed Formats: jpg, png, gif, bmp.
     * 
     * @param clickEvent Button dispatching this click event
     */
    private void saveImage(java.awt.event.ActionEvent clickEvent) {
    	//User picks output file name
    	JFileChooser chooser = new JFileChooser();
    	int returnValue = chooser.showOpenDialog(this);
    	
    	// If user selected a file and did not cancel the chooser
    	if (returnValue == JFileChooser.APPROVE_OPTION) {
    		
    		File outputFile = chooser.getSelectedFile();
    		
    		//Get array of all allowed formats
        	String[] imageFormats = ImageIO.getWriterFileSuffixes();
        	String selectedFormat = null;
        	// Check that selected file ends in a valid format
        	for (String format : imageFormats) {
        		if (outputFile.getName().toLowerCase().endsWith(format)) {
        			selectedFormat = format;
        		}
        	}
        	
        	//Format not found in list
        	if (selectedFormat == null) {
        		JOptionPane.showMessageDialog(gui, "Picture file must be GIF, "
                        + "PNG, JPG, or BMP.");
        	} else {
        		// write image to file
        		try {
        			ImageIO.write(saveImage, selectedFormat, outputFile);
        		} catch (IOException e) {
        			JOptionPane.showMessageDialog(gui, "Picture file could not be "
                            + "opened, try a different file.");
        		}
        	}	
    	}
    }

    /**
     * Generate and apply the mosaic pattern or points if points only selected
     * @param evt 
     */
    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
    	
    	// For measuring performance, get start time
    	long startTime = System.currentTimeMillis();
    	
    	//disable pic and start button while running
        picSelectBtn.setEnabled(false);
        openItem.setEnabled(false);
        startBtn.setEnabled(false);
        //get plot type
        String plotType = randomPlot.isSelected() ? "RANDOM" : "UNIFORM";
        
        controller.start(fullImage, densitySlider.getValue(), plotType, pointsOnlyBtn.isSelected());
        
        redrawImage();
        
        //reset for rerunning
        currentState.handleStart();
        
        // For performance debugging. End time
        long endTime = System.currentTimeMillis();
        
        // Output performance data to console.
        /*
        double duration = (endTime - startTime) / 1000.0;
        int pixels = fullImage.getWidth() * fullImage.getHeight();
        if (duration > 0) {
        	System.out.println();
        	System.out.println("------------------------------------------------------");
	        System.out.println("Total Duration: " + duration + " seconds");
	        System.out.println("Pixels / second: " + pixels / duration);
	        System.out.println("Seconds / pixel: " + (double)(duration / pixels));
	        System.out.println("Time @ 10,000,000 pixels: " + (double)(duration / pixels) * 10000000.0);
	        System.out.println("------------------------------------------------------");
	        System.out.println();
        }
        */
    }//GEN-LAST:event_startBtnActionPerformed

    /**
     * Scale the image if either dimension is greater than the max
     * @return scaled image if scaling performed, full image otherwise.
     */
    private BufferedImage scaleImage() {
        if (fullImage.getWidth() > MAX_DIMENSION ||
                fullImage.getHeight() > MAX_DIMENSION) {
            scaledImage = Scalr.resize(fullImage, MAX_DIMENSION);
            return scaledImage;
        } else {
            return fullImage;
        }
    }
    
    /**
     * Redraw the draw area after making a change to the image.
     * Scale the image if necessary before drawing.
     * set the container sizes to the image being drawn
     * make sure the frame is the correct size after resizing.
     */
    private void redrawImage() {
        //no image, blank area
    	drawContainer.removeAll();
        if (fullImage == null) {            
            //reset container size.
            drawContainer.setPreferredSize(new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT));
        } else {
            BufferedImage toDraw = scaleImage();
            drawPanel = new DrawPanel(toDraw);
            drawPanel.setPreferredSize(new Dimension(toDraw.getWidth(), toDraw.getHeight()));
            drawContainer.setPreferredSize(drawPanel.getPreferredSize());
            drawContainer.add(drawPanel);
        }
        this.revalidate();
        this.repaint();
        this.pack();
        
        //remove reference to scaled image
        flushImage(scaledImage);
        scaledImage = null;
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel densityLabel;
    private javax.swing.JSlider densitySlider;
    private javax.swing.JPanel drawContainer;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel heading;
    private javax.swing.JPanel headingPanel;
    private javax.swing.JMenuItem helpItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JButton picSelectBtn;
    private javax.swing.ButtonGroup plotType;
    private javax.swing.JPanel plotTypePanel;
    private javax.swing.JRadioButton poissonPlot;
    private javax.swing.JRadioButton randomPlot;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox pointsOnlyBtn;
    private javax.swing.JButton startBtn;
    private javax.swing.JLabel subText;
    // End of variables declaration//GEN-END:variables
    
    /**
     * The GUI state after a picture has been selected.
     */
    private class PictureSelectedState implements GuiState {

    	/**
    	 * Handle clicking the picture selection button. Refresh state with new selected picture 
    	 */
		@Override
		public void handlePicSelected() {
			enterState();	
			redrawImage();	
		}

		/**
		 * Handle toggling the points only button
		 */
		@Override
		public void handlePointsOnlyToggle() {
			currentState = pointsOnlyState;
			currentState.enterState();		
			redrawImage();	
		}

		/** 
		 * Handle pressing the start button
		 */
		@Override
		public void handleStart() {
			flushImage(saveImage);
			saveImage = fullImage;
			flushImage(fullImage);
			fullImage = null;
			enterState();
			saveButton.setEnabled(true);			
			saveItem.setEnabled(true);
		}

		/** 
		 * Called on transition into this state. load image, enable picture select button, enable start button, 
		 * disable save button, draw the image
		 */
		@Override
		public void enterState() {
			try {
				if (inputFile != null) {
					fullImage = ImageIO.read(inputFile);
					picSelectBtn.setEnabled(true);
					openItem.setEnabled(true);
					startBtn.setEnabled(true);
					saveButton.setEnabled(false);
					saveItem.setEnabled(false);
				} else {
					System.err.println("No input file loaded");
				}
			} catch (IOException e) {
				JOptionPane.showMessageDialog(gui, "Picture file could not be "
                        + "opened, try a different file.");
			}			
		}    	
    }
    
    /**
     * The GUI state after toggling the points only check box on.
     */
    private class PointsOnlyState implements GuiState {

    	/**
    	 * Handle clicking the picture selection button 
    	 */
		@Override
		public void handlePicSelected() {
			currentState = picSelectedState;
			currentState.enterState();
			redrawImage();			
		}

		/**
		 * Handle toggling the points only button
		 */
		@Override
		public void handlePointsOnlyToggle() {
			currentState = defaultState;
			currentState.enterState();
			redrawImage();			
		}

		/** 
		 * Handle pressing the start button
		 */
		@Override
		public void handleStart() {
			flushImage(saveImage);
			saveImage = fullImage;
			flushImage(fullImage);
			fullImage = null;
			enterState();
			saveButton.setEnabled(true);
			saveItem.setEnabled(true);
		}

		/**
		 * Call on transition into this state. Null picLocation, disable picture select button, enable start button, 
		 * disable save button if no image to save, generate and draw blank image.
		 */
		@Override
		public void enterState() {
			inputFile = null;
			picSelectBtn.setEnabled(false);
			openItem.setEnabled(false);
			startBtn.setEnabled(true);
			saveButton.setEnabled(false);
			saveItem.setEnabled(false);
			fullImage = new BufferedImage(POINTS_DIM, POINTS_DIM, BufferedImage.TYPE_INT_RGB);
		}	
    }
    
    /**
     * The state when starting the program.
     */
    private class DefaultState implements GuiState {

    	/**
    	 * Handle clicking the picture selection button 
    	 */
		@Override
		public void handlePicSelected() {
			currentState = picSelectedState;
			currentState.enterState();		
			redrawImage();	
		}

		/**
		 * Handle toggling the points only button
		 */
		@Override
		public void handlePointsOnlyToggle() {
			currentState = pointsOnlyState;
			currentState.enterState();	
			redrawImage();	
		}

		/**
		 * Not a valid action in this state
		 */
		@Override
		public void handleStart() {System.err.println("Cannot start running in default state.");}

		/** 
		 * Call on transition into this state. Null images, null selected picture location, reset draw Container to default size,
		 * Enable the picture selection button, disable the start button, and disable the save button if there is no image to save.
		 */
		@Override
		public void enterState() {
			flushImage(fullImage);
			fullImage = null;
			flushImage(saveImage);
			saveImage = null;
			inputFile = null;
			picSelectBtn.setEnabled(true);
			openItem.setEnabled(true);
			startBtn.setEnabled(false);
			saveButton.setEnabled(false);
			saveItem.setEnabled(false);
		}    	
    }
    
    private void flushImage(BufferedImage image) {
    	if (image != null) {
    		image.flush();
    	}
    }
}
